// Wait for DOM to fully load
document.addEventListener('DOMContentLoaded', function() {
    // Initialize all functionality
    initNavigation();
    initAnimations();
    initSkillBars();
    initContactForm();
    initFloatingFlowers();
});

// Navigation functionality
function initNavigation() {
    const menuToggle = document.querySelector('.menu-toggle');
    const navLinks = document.querySelector('.nav-links');
    
    if (menuToggle) {
        menuToggle.addEventListener('click', function() {
            navLinks.classList.toggle('active');
        });
    }
    
    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function(e) {
            e.preventDefault();
            
            const targetId = this.getAttribute('href');
            if (targetId === '#') return;
            
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
                // Close mobile menu if open
                if (navLinks.classList.contains('active')) {
                    navLinks.classList.remove('active');
                }
                
                window.scrollTo({
                    top: targetElement.offsetTop - 100,
                    behavior: 'smooth'
                });
            }
        });
    });
}

// Initialize animations
function initAnimations() {
    // Intersection Observer for scroll animations
    const observerOptions = {
        root: null,
        rootMargin: '0px',
        threshold: 0.1
    };
    
    const observer = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('animated');
            }
        });
    }, observerOptions);
    
    // Observe elements for animation
    const elementsToAnimate = document.querySelectorAll('.project-card, .skill, .stat, .contact-item');
    elementsToAnimate.forEach(el => {
        observer.observe(el);
    });
}

// Animate skill bars
function initSkillBars() {
    const skillBars = document.querySelectorAll('.skill-progress');
    
    const skillObserver = new IntersectionObserver(function(entries) {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                const width = entry.target.getAttribute('data-width');
                entry.target.style.width = width;
                skillObserver.unobserve(entry.target);
            }
        });
    }, { threshold: 0.5 });
    
    skillBars.forEach(bar => {
        skillObserver.observe(bar);
    });
}

// Contact form functionality
function initContactForm() {
    const contactForm = document.querySelector('.contact-form');
    
    if (contactForm) {
        contactForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Simple form validation
            const nameInput = this.querySelector('input[type="text"]');
            const emailInput = this.querySelector('input[type="email"]');
            const messageInput = this.querySelector('textarea');
            
            let isValid = true;
            
            if (!nameInput.value.trim()) {
                highlightError(nameInput);
                isValid = false;
            } else {
                removeError(nameInput);
            }
            
            if (!emailInput.value.trim() || !isValidEmail(emailInput.value)) {
                highlightError(emailInput);
                isValid = false;
            } else {
                removeError(emailInput);
            }
            
            if (!messageInput.value.trim()) {
                highlightError(messageInput);
                isValid = false;
            } else {
                removeError(messageInput);
            }
            
            if (isValid) {
                // Simulate form submission
                const submitBtn = this.querySelector('button');
                const originalText = submitBtn.textContent;
                
                submitBtn.textContent = 'Sending...';
                submitBtn.disabled = true;
                
                setTimeout(() => {
                    alert('Thank you for your message! I will get back to you soon.');
                    this.reset();
                    submitBtn.textContent = originalText;
                    submitBtn.disabled = false;
                }, 1500);
            }
        });
    }
}

// Email validation helper
function isValidEmail(email) {
    const re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return re.test(email);
}

// Highlight form field with error
function highlightError(field) {
    field.style.borderColor = '#ff3860';
}

// Remove error highlighting
function removeError(field) {
    field.style.borderColor = '#e6e6fa';
}

// Create additional floating flowers
function initFloatingFlowers() {
    const floatingFlowers = document.querySelector('.floating-flowers');
    
    // Add more flowers for a richer effect
    for (let i = 0; i < 7; i++) {
        const flower = document.createElement('div');
        flower.classList.add('flower');
        
        // Random properties
        const size = Math.floor(Math.random() * 30) + 20;
        const top = Math.floor(Math.random() * 100);
        const left = Math.floor(Math.random() * 100);
        const duration = Math.floor(Math.random() * 30) + 20;
        const delay = Math.floor(Math.random() * 15);
        
        // Random color from our palette
        const colors = ['#8a2be2', '#9370db', '#ff69b4'];
        const color = colors[Math.floor(Math.random() * colors.length)];
        
        // Apply styles
        flower.style.width = `${size}px`;
        flower.style.height = `${size}px`;
        flower.style.top = `${top}%`;
        flower.style.left = `${left}%`;
        flower.style.animationDuration = `${duration}s`;
        flower.style.animationDelay = `${delay}s`;
        flower.style.background = color;
        flower.style.opacity = Math.random() * 0.2 + 0.1;
        
        floatingFlowers.appendChild(flower);
    }
}

// Parallax effect for background elements
function initParallax() {
    window.addEventListener('scroll', function() {
        const scrollY = window.scrollY;
        const flowers = document.querySelectorAll('.flower');
        
        flowers.forEach(flower => {
            const speed = 0.5;
            flower.style.transform = `translateY(${scrollY * speed}px) rotate(${scrollY * 0.1}deg)`;
        });
    });
}

// Initialize everything when window loads
window.onload = function() {
    initParallax();
};
